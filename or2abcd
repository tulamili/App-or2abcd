#!/usr/bin/perl 
use 5.014 ; use warnings ; 
use Time::HiRes qw [ gettimeofday tv_interval ] ;
my ${ dt_start } = [ gettimeofday ] ; 
use Encode qw[ decode_utf8 encode_utf8 ] ; 
use Getopt::Std ; getopts 'v' , \my %o  ; 
use Term::ANSIColor qw[ color :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use FindBin qw[ $Script ] ; 
#use autodie qw [ open ] ;
use List::Util qw[ min max ] ; 
#use Scalar::Util qw [ dualvar looks_like_number ]  ; 
use utf8 ; 

# * d3 = exists $o{','} && $o{','} eq 0 ? sub{$_[0]} : sub { $_[0] =~ s/(?<=\d)(?=(\d\d\d)+($|\D))/,/gr } ;
my $time0 = time ; 
my $help = 0  ; # オンラインヘルプの文面の表示をしたか否か。
my $readLines  ; # 読み取った行数
my $sec = $o{'@'} // 15 ; # 何秒おきにアラームを発生させるか
my $neoM = ! exists $o{M} ; 
my $noB = ! $o{B} ;
$o{y} //= "2.." if ! $neoM ; 
our @y_ranges ; 
& y_init () ; 

$SIG{INT} = sub { exit } ;
my $q95 = 1.959963984540053855604430 ; 

binmode STDIN , "utf8" ; 
binmode STDOUT , "utf8" ;

& main () ; 
exit 0 ; 

sub main () { 
  my $v0 = $ARGV[0] ;  # オッズ比の推定値(中心)として、与えられた数値 ad/bc 
  my $v1 = $ARGV[1] // undef ;  # 推定したオッズ比の下限値
  my $v2 = $ARGV[2] // undef ;  # 推定したオッズ比の上限値
  
  if ( $o{v} ) { 
    printf sprintf "%g(%g) %g(%g)\t", $v0/$v1, log($v0/$v1) , $v2/$v0 , log($v2/$v0 ) ; 
    say FAINT BOLD "\t<-- each ratio(log) of $v0/$v1 and $v2/$v0"; 
    say FAINT BOLD "\t\t\twhere $v0, $v1, $v2 are observed odds ratio, and the bounds of 95% confidence interval." ;
    my $rs4v = rs4 (sqrt($v2/$v1))  ; 
    my $iv = 4/$rs4v ; # inner value の頭文字。a,b,c,dの4個の数の、最小と最大の中に含まれる数である。
    say sprintf ("%g -> %g" , $rs4v , $iv ) , "\t" , FAINT BOLD "1/a+1/b+1/c+1/d とその値から導いた区間[min{a,b,c,d},max{a,b,c,d}]が含むべき値" ; 
    my $nr = sqrt($v0) ; # neighboring ratio の意味で名付けた。a/b,a/c,b/d,c/dのどれかは、数値区間[$nr,1/$nr]の外にある。
    say sprintf ( "%g, %g" , min($nr,1/$nr), max($nr,1/$nr) ), "\t" , FAINT BOLD "左をl,mとすると、2x2の表で上下左右隣り合う数の比であるa/b,a/c,b/d,c/dのどれかは、区間(l,m)の外。" ; 
    # exit ; 
  }
  #say join ", " , map { log $_ } $v0 , $v1 , $v2 ; 
  #say "   " log $v0 - log $v1 , log $v2 - log $v0 ;
  # 下限の$v1を使うと、誤差が大きくなるので(数値区間で考えると良い)、上限の値を採用。 
  say YELLOW UNDERLINE "以下の結果は、2x2のクロス表において、a=d かつ b=c を仮定 :" ; 
  say join "\t" , '', rg2ab ( sqrt $v0, rs4 ( $v2 / $v0 ) / 2 ) , ": 上限値と中心値を使った場合の aとdの相乗平均, bとcの相乗平均" ; 
  say join "\t" , '', rg2ab ( sqrt $v0, rs4 ( $v0 / $v1 ) / 2 ) , ": 下限値と中心値を使った場合の aとdの相乗平均, bとcの相乗平均" ; 
  say join "\t" , '', rg2ab ( sqrt $v0, rs4 ( sqrt($v2/$v1) ) / 2 ) , ": 下限値と下限値の比からデルタ法で対数オッズ比の標準誤差を計算した場合の aとdの相乗平均, bとcの相乗平均" ; 

}

sub rs4 ($) { ( log ( $_[0] ) / $q95 ) ** 2 } # 4個の数(a,b,c,d)逆数の4個の和の推定値を返す。逆数Gと和Wを繋げて reciprocal sum 
sub rg2ab ($$) { my ($r,$w) = @_ ; return ( ($r+1)/$w , ($r+1)/($r*$w) ) } # 比(ad/bc)の値rと、(GW/2)の値gが引数。返り値は、aとb ただし、a=d, b=cの仮定をした。



#* R0proc = exists $o{R} && $o{R} eq 0 ? sub {} : sub { s/\r$// } ; 
#* decode = ($o{u}//'') ne 0 ? * decode_utf8 : sub ( $ ) { $_[0] } ; 
$o{0} //= '-' ; # 行列状の出力で 値が 0 の場合に出力する文字
my $isep = $o{i} // "\t" ;  # 入力の区切り文字

##
sub y_init ( ) { 
  my @ranges = split /,/o , $o{y} // '' , -1 ; 
  grep { $_ = $_ . ".." . $_ unless m/\.\./ }  @ranges ; # = split /,/ , $o{y} // '' , -1 ; 
  do { m/^(\d*)\.\.(\d*)/ ; push @y_ranges , [ $1||1 , $2||'Inf' ] } for @ranges ; 
}
sub y_filter ( $ ) { 
  do { return not 0 if $_->[0] <= $_[0] && $_[0] <= $_->[1] } for @y_ranges ; 
  return @y_ranges ? not 1 : not 0 ; # 指定が無かった場合はとにかく真を返す。
}

END {
  exit if $help ;
  my $procsec = sprintf "%.5f", tv_interval ${ dt_start } ; # このプログラムの処理にかかった秒数。比較する2個の時刻は秒単位なので、±1秒未満の誤差は発生する。
  return if ($o{2}//'') eq 0 ; 
  my $s = tv_interval $dt_start , [ gettimeofday ] ; 
  say STDERR BOLD FAINT ITALIC " -- $Script ; " . $procsec . " sec. in process" ;
}

## ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
  use FindBin qw[ $Script ] ; 
  $ARGV[1] //= '' ;
  open my $FH , '<' , $0 ;
  while(<$FH>){
    s/\$0/$Script/g ;
    print $_ if s/^=head1// .. s/^=cut// and $ARGV[1] =~ /^o(p(t(i(o(ns?)?)?)?)?)?$/i ? m/^\s+\-/ : 1;
  }
  close $FH ;
  exit 0 ;
}

=encoding utf8

=head1 $0 

 オッズ比とその信頼区間の数値(計3個)から、元の2x2クロス表の数値(a,b,c,d)を推定する。
 信頼区間は 95%信頼区間と見なす(オプションで将来は変更可能とする見込み)。
 ただし、a=d ∩ b=c などの仮定をつけることになるであろう。

使用例 : 
    $0 0.59 0.30 1.16 # 

オプション : 

  --help : このオンラインのヘルプ画面を出力する。 perldoc $0 や man $0 でも可能であろう。

開発メモ : 
   * 与えられた数値は、四捨五入された者と見なして、区間計算をしたい。
   * a,b,c,dの最大値を -m で与えた上で、min{a,b,c,d}を算出する方法を実装したい。

=cut
